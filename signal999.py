# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'signal.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
import random
import matplotlib.pyplot as plt
import numpy as np
from scipy.fft import fft, fftfreq
from scipy.fft import rfft, rfftfreq
from scipy.fft import ifft


class Ui_MainWindow(object):
	def setupUi(self, MainWindow):
		MainWindow.setObjectName("MainWindow")
		MainWindow.resize(575, 246)
		self.centralwidget = QtWidgets.QWidget(MainWindow)
		self.centralwidget.setObjectName("centralwidget")
		self.inoutA1 = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.inoutA1.setGeometry(QtCore.QRect(260, 20, 51, 21))
		self.inoutA1.setObjectName("inoutA1")
		self.inoutf1 = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.inoutf1.setGeometry(QtCore.QRect(260, 60, 51, 21))
		self.inoutf1.setObjectName("inoutf1")
		self.inoutphi1 = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.inoutphi1.setGeometry(QtCore.QRect(260, 100, 51, 21))
		self.inoutphi1.setObjectName("inoutphi1")
		self.inoutphi2 = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.inoutphi2.setGeometry(QtCore.QRect(370, 100, 51, 21))
		self.inoutphi2.setObjectName("inoutphi2")
		self.inoutf2 = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.inoutf2.setGeometry(QtCore.QRect(370, 60, 51, 21))
		self.inoutf2.setObjectName("inoutf2")
		self.inoutA2 = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.inoutA2.setGeometry(QtCore.QRect(370, 20, 51, 21))
		self.inoutA2.setObjectName("inoutA2")
		self.inoutphi3 = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.inoutphi3.setGeometry(QtCore.QRect(480, 100, 51, 21))
		self.inoutphi3.setObjectName("inoutphi3")
		self.inoutf3 = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.inoutf3.setGeometry(QtCore.QRect(480, 60, 51, 21))
		self.inoutf3.setObjectName("inoutf3")
		self.inoutA3 = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.inoutA3.setGeometry(QtCore.QRect(480, 20, 51, 21))
		self.inoutA3.setObjectName("inoutA3")
		self.label = QtWidgets.QLabel(self.centralwidget)
		self.label.setGeometry(QtCore.QRect(240, 20, 16, 21))
		self.label.setObjectName("label")
		self.label_2 = QtWidgets.QLabel(self.centralwidget)
		self.label_2.setGeometry(QtCore.QRect(350, 20, 16, 21))
		self.label_2.setObjectName("label_2")
		self.label_3 = QtWidgets.QLabel(self.centralwidget)
		self.label_3.setGeometry(QtCore.QRect(460, 20, 21, 21))
		self.label_3.setObjectName("label_3")
		self.label_4 = QtWidgets.QLabel(self.centralwidget)
		self.label_4.setGeometry(QtCore.QRect(240, 60, 16, 21))
		self.label_4.setObjectName("label_4")
		self.label_5 = QtWidgets.QLabel(self.centralwidget)
		self.label_5.setGeometry(QtCore.QRect(240, 100, 21, 21))
		self.label_5.setObjectName("label_5")
		self.label_6 = QtWidgets.QLabel(self.centralwidget)
		self.label_6.setGeometry(QtCore.QRect(350, 60, 16, 21))
		self.label_6.setObjectName("label_6")
		self.label_7 = QtWidgets.QLabel(self.centralwidget)
		self.label_7.setGeometry(QtCore.QRect(350, 100, 21, 21))
		self.label_7.setObjectName("label_7")
		self.label_8 = QtWidgets.QLabel(self.centralwidget)
		self.label_8.setGeometry(QtCore.QRect(460, 100, 21, 21))
		self.label_8.setObjectName("label_8")
		self.label_9 = QtWidgets.QLabel(self.centralwidget)
		self.label_9.setGeometry(QtCore.QRect(460, 60, 21, 21))
		self.label_9.setObjectName("label_9")
		self.inoutfd = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.inoutfd.setGeometry(QtCore.QRect(140, 60, 51, 21))
		self.inoutfd.setObjectName("inoutfd")
		self.inoutN = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.inoutN.setGeometry(QtCore.QRect(140, 30, 51, 21))
		self.inoutN.setObjectName("inoutN")
		self.btnplot = QtWidgets.QPushButton(self.centralwidget)
		self.btnplot.setGeometry(QtCore.QRect(430, 150, 131, 31))
		self.btnplot.setObjectName("btnplot")
		self.label_12 = QtWidgets.QLabel(self.centralwidget)
		self.label_12.setGeometry(QtCore.QRect(10, 0, 121, 21))
		self.label_12.setObjectName("label_12")
		self.label_13 = QtWidgets.QLabel(self.centralwidget)
		self.label_13.setGeometry(QtCore.QRect(10, 30, 81, 16))
		self.label_13.setObjectName("label_13")
		self.label_14 = QtWidgets.QLabel(self.centralwidget)
		self.label_14.setGeometry(QtCore.QRect(10, 90, 91, 16))
		self.label_14.setObjectName("label_14")
		self.label_15 = QtWidgets.QLabel(self.centralwidget)
		self.label_15.setGeometry(QtCore.QRect(10, 120, 71, 16))
		self.label_15.setObjectName("label_15")

		self.label_155 = QtWidgets.QLabel(self.centralwidget)
		self.label_155.setGeometry(QtCore.QRect(10, 150, 71, 16))
		self.label_155.setObjectName("label_155")
		self.inoutNoise = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.inoutNoise.setGeometry(QtCore.QRect(140, 150, 51, 21))
		self.inoutNoise.setObjectName("inoutSNR")

		self.label_156 = QtWidgets.QLabel(self.centralwidget)
		self.label_156.setGeometry(QtCore.QRect(10, 180, 71, 16))
		self.label_156.setObjectName("label_155")
		self.label_157 = QtWidgets.QLabel(self.centralwidget)
		self.label_157.setGeometry(QtCore.QRect(140, 180, 51, 21))
		self.label_157.setObjectName("label_155")

		self.inoutSNR = QtWidgets.QPlainTextEdit(self.centralwidget)
		self.inoutSNR.setGeometry(QtCore.QRect(140, 120, 51, 21))
		self.inoutSNR.setObjectName("inoutSNR")
		self.label_16 = QtWidgets.QLabel(self.centralwidget)
		self.label_16.setGeometry(QtCore.QRect(250, 0, 81, 16))
		self.label_16.setObjectName("label_16")
		self.label_17 = QtWidgets.QLabel(self.centralwidget)
		self.label_17.setGeometry(QtCore.QRect(10, 60, 121, 16))
		self.label_17.setObjectName("label_17")
		self.label_18 = QtWidgets.QLabel(self.centralwidget)
		self.label_18.setGeometry(QtCore.QRect(360, 0, 81, 16))
		self.label_18.setObjectName("label_18")
		self.label_19 = QtWidgets.QLabel(self.centralwidget)
		self.label_19.setGeometry(QtCore.QRect(470, 0, 81, 16))
		self.label_19.setObjectName("label_19")
		MainWindow.setCentralWidget(self.centralwidget)
		self.menubar = QtWidgets.QMenuBar(MainWindow)
		self.menubar.setGeometry(QtCore.QRect(0, 0, 575, 21))
		self.menubar.setObjectName("menubar")
		MainWindow.setMenuBar(self.menubar)
		self.statusbar = QtWidgets.QStatusBar(MainWindow)
		self.statusbar.setObjectName("statusbar")
		MainWindow.setStatusBar(self.statusbar)
		self.toolBar = QtWidgets.QToolBar(MainWindow)
		self.toolBar.setObjectName("toolBar")
		MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
		MainWindow.insertToolBarBreak(self.toolBar)

		self.retranslateUi(MainWindow)
		QtCore.QMetaObject.connectSlotsByName(MainWindow)

	def retranslateUi(self, MainWindow):
		_translate = QtCore.QCoreApplication.translate
		MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
		self.label.setText(_translate("MainWindow", "A ="))
		self.label_2.setText(_translate("MainWindow", "A ="))
		self.label_3.setText(_translate("MainWindow", "A ="))
		self.label_4.setText(_translate("MainWindow", "f ="))
		self.label_5.setText(_translate("MainWindow", "φ ="))
		self.label_6.setText(_translate("MainWindow", "f = "))
		self.label_7.setText(_translate("MainWindow", "φ ="))
		self.label_8.setText(_translate("MainWindow", "φ ="))
		self.label_9.setText(_translate("MainWindow", "f ="))
		self.btnplot.setText(_translate("MainWindow", "Сгенерировать сигнал"))
		self.label_12.setText(_translate("MainWindow", "Параметры сигнала"))
		self.label_13.setText(_translate("MainWindow", "Длина сигнала:"))
		self.label_14.setText(_translate("MainWindow", "Параметры шума"))
		self.label_15.setText(_translate("MainWindow", "Энергия (%):"))
		self.label_155.setText(_translate("MainWindow", "Шум (%):"))
		self.label_156.setText(_translate("MainWindow", "Отношение:"))
		self.label_157.setText(_translate("MainWindow", ""))
		self.label_16.setText(_translate("MainWindow", "Гармоника №1"))
		self.label_17.setText(_translate("MainWindow", "Частота дискретиации: "))
		self.label_18.setText(_translate("MainWindow", "Гармоника №2"))
		self.label_19.setText(_translate("MainWindow", "Гармоника №3"))
		self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))

class MainWindow(QMainWindow, Ui_MainWindow):
	def __init__(self):
		super().__init__()
		
		self.setupUi(self)

		self.inoutA1.setPlainText("0.5")
		self.inoutA2.setPlainText("1")
		self.inoutA3.setPlainText("2")
		self.inoutf1.setPlainText("1")
		self.inoutf2.setPlainText("3")
		self.inoutf3.setPlainText("5")
		self.inoutphi1.setPlainText("2")
		self.inoutphi2.setPlainText("4")
		self.inoutphi3.setPlainText("6")
		self.inoutfd.setPlainText("100")
		self.inoutN.setPlainText("1")
		self.inoutSNR.setPlainText("80")
		self.inoutNoise.setPlainText("20")

		self.btnplot.clicked.connect(self.plot_graph)
		
	def plot_graph(self):
		plt.close()

		A1 = float(self.inoutA1.toPlainText())
		A2 = float(self.inoutA2.toPlainText())
		A3 = float(self.inoutA3.toPlainText())
		f1 = float(self.inoutf1.toPlainText()) #По умолчанию f = 100
		f2 = float(self.inoutf2.toPlainText())
		f3 = float(self.inoutf3.toPlainText())
		phi1 = float(self.inoutphi1.toPlainText())
		phi2 = float(self.inoutphi2.toPlainText())
		phi3 = float(self.inoutphi3.toPlainText())
		fd = float(self.inoutfd.toPlainText()) #По умолчанию fd = 2000
		N = int(self.inoutN.toPlainText()) #N = int(10 * fd / f)
		SNR1 = float(self.inoutSNR.toPlainText())
		Alpha1 = float(self.inoutNoise.toPlainText())
		SNR = SNR1/100
		Alpha = Alpha1/100

		tstep = 1 / fd
		DURATION = N / fd
		t = np.arange(0, N, tstep)
		y = A1 * np.sin(2 * np.pi * f1 * t + phi1) + A2 * np.sin(2 * np.pi * f2 * t + phi2) + A3 * np.sin(
			2 * np.pi * f3 * t + phi3)

		# noise = np.rand(0, 1, len(y)) #Нормализовать!

		# Y = y + Alpha * noise
		# normalized_tone = np.int16((y / y.max() * 32767))  # масштабирование
		# normalized_tone2 = np.int16((Y / Y.max() * 32767))
		Noise = []
		ENoise = 0
		for i in range(0, len(y)):
			q = 0
			for j in range(0, 11):
				q += random.uniform(0, 2) - 1

			q = q/12
			Noise.append(q)
			ENoise += q * q

		ESignal = 0
		for k in range(0, len(y)):
			ESignal += y[k] * y[k]

		Betta = np.sqrt(Alpha * ESignal / ENoise)
		noise = []
		for i in range(0, len(y)):
			noise.append(Betta * Noise[i])

		Y = [k1 + k2 for k1, k2 in zip(y, noise)]
		# Y = y + noise
		n = len(Y)

		YY = np.fft.fft(Y, n)
		# --- frq = np.arange(n) * fd / n
		frq = np.arange(n)
		# Прямой Фурье
		# yf = rfft(y)
		# yf2 = rfft(Y)
		# tf = rfftfreq(N, tstep)

		# /////////////////////////////////////////////////////////////////////////////////////
		fig, ax = plt.subplots(3, 2, figsize=(20, 30))
		ax[0, 0].set(xlabel='time, s', ylabel='y', title='')
		ax[0, 1].set(xlabel='freq, Hz', ylabel='y', title='')
		ax[1, 0].set(xlabel='', ylabel='', title='')
		ax[1, 1].set(xlabel='', ylabel='', title='')
		ax[2, 0].set(xlabel='', ylabel='', title='')
		ax[2, 1].set(xlabel='', ylabel='', title='')

		ax[0, 0].grid()
		ax[0, 1].grid()
		ax[1, 0].grid()
		ax[1, 1].grid()
		ax[2, 0].grid()
		ax[2, 1].grid()
		# YYYY = 2 * np.abs(YY) / n
		# YYYY = np.abs(YY)
		ax[0, 0].plot(t, Y)
		ax[0, 1].plot(frq, np.abs(YY))
		# ax[0, 1].plot(t, y, '.-')
		# ax[1, 0].plot(t, Y, '.-')
		# ax[1, 1].plot(tf, np.abs(yf2), '.-')

		# --- Epolnaya = 0
		# --- for i in range(0, int(len(frq))):
		# --- 	Epolnaya = Epolnaya + (YY[i]) ** 2


		Epolnaya = 0
		fx_with_noise = []
		for i in range(0, len(frq)):
			Epolnaya += 2 * np.abs(YY[i]) / len(frq) * 2 * np.abs(YY[i]) / len(frq)
			fx_with_noise.append(2*np.abs(YY[i])/len(frq))

		i = 0
		U = 0
		SNR = SNR * Epolnaya
		k = 0


		for i in range(0, len(frq)):
			U += pow(fx_with_noise[i], 2) + pow(fx_with_noise[len(frq) - 1 - i], 2)
			if (U >= SNR):
				k = i
				break

				# --- for j in range(0, number):
				# ---     YY[j] = 0
				# --- for j in range(int(len(frq)) - number + 1, int(len(frq))):
				# ---     YY[j] = 0

		for i in range(k+1, int(len(frq)) - k):
			YY[i] = 0

		# --- k = 0
		# --- Filtr = 0
		# --- for i in range(0, len(Y)):
		# --- 	Filtr += pow(Y[i], 2) + pow(Y[len(Y) - 1 - i], 2)
		# --- 	k += 1
		# --- 	if Filtr >= Epolnaya * SNR:
		# --- 		i = len(Y)

		# --- for i in range(k, len(Y) - k):
		# --- 	YY[i].imag = 0

		ax[2, 0].plot(frq, np.abs(YY))
		# Обратный Фурье
		# X = ifft(YYYY)*n/2
		X = ifft(YY)
		ax[2, 1].plot(t, X)
		# X = ifft(YYYY)
		ax[1, 0].plot(t, y)
		ax[1, 0].plot(t, X)
		ax[1, 0].plot(t, np.power(X - y, 2)/N)



		dif = [k3 - k4 for k3, k4 in zip(X, y)]
		Edif = 0
		for i in range(0, len(y)):
			Edif += dif[i] * dif[i]
		Gamma = Edif / ESignal
		self.label_157.setText(str(Gamma))
		fig.savefig("test.png")
		plt.show()



		#
		# # tstep = 1 / fd #Интервал между отчетами
		# # t = np.linspace(0, (N - 1)*tstep, N)
		# # fstep = fd / N #freq интервал
		# # f = np.linspace(0, (N - 1)*fstep, N) #Интервал между частотами
		# #
		# # y = A1*np.sin(2*np.pi*f1*tstep*t+phi1) + A2*np.sin(2*np.pi*f2*tstep*t+phi2) +A3*np.sin(2*np.pi*f3*tstep*t+phi3)
		# #
		# # X = np.fft.fft(y)       # X - будет серией комплексных чисел (преобр. Фурье)
		# # X_mag = np.abs(X) / N   # Нормализация величины X
		# #
		# # f_plot = f[0:int((N/2)+1)]
		# # X_mag_plot = 2 * X_mag[0:int((N/2)+1)]
		# # X_mag_plot[0] = X_mag_plot[0] / 2
		#
		# tstep = 1 / fd
		# DURATION = N / fd
		# t = np.linspace(0, (N - 1) * tstep, N, endpoint=False)
		# y = A1*np.sin(2*np.pi*f1*tstep*t+phi1) + A2*np.sin(2*np.pi*f2*tstep*t+phi2) +A3*np.sin(2*np.pi*f3*tstep*t+phi3)
		# noise = np.random.normal(0, 1, N)
		# Y = y + Koef * noise
		# normalized_tone = np.int16((y / Y.max() * 32767)) #масштабирование
		# normalized_tone2 = np.int16((Y / Y.max() * 32767))
		# #Прямой Фурье
		# yf = rfft(normalized_tone)
		# yf2 = rfft(normalized_tone2)
		# tf = rfftfreq(N, tstep)
		#
		#
		# #/////////////////////////////////////////////////////////////////////////////////////
		# fig, ax = plt.subplots(3, 2, figsize = (10, 10))
		# ax[0, 0].set(xlabel='time, s', ylabel='y', title='Сигнал')
		# ax[0, 1].set(xlabel='freq, Hz', ylabel='y', title='Частотный спектр')
		# ax[1, 0].set(xlabel='', ylabel='', title='Сигнал с шумом')
		# ax[1, 1].set(xlabel='', ylabel='', title='Частотный спектр с шумом')
		# ax[2, 0].set(xlabel='', ylabel='', title='Отфлиртованный частотный спектр')
		# ax[2, 1].set(xlabel='', ylabel='', title='Восстановленный сигнал')
		#
		# ax[0, 0].grid()
		# ax[0, 1].grid()
		# ax[1, 0].grid()
		# ax[1, 1].grid()
		# ax[2, 0].grid()
		# ax[2, 1].grid()
		#
		# ax[0, 0].plot(t, y, '.-')
		# ax[0, 1].plot(tf, np.abs(yf), '.-')
		# ax[1, 0].plot(t, Y, '.-')
		# ax[1, 1].plot(tf, np.abs(yf2), '.-')
		#
		# Epolnaya = 0
		# for i in range(0, len(tf)):
		#     Epolnaya = Epolnaya + (np.abs(yf2[i])) ** 2
		#
		# i = 0
		# U = 0
		# while i != len(tf):
		#     U = U + (((np.abs(yf2[i])) ** 2) / Epolnaya)
		#     if (U > SNR):
		#         number = i
		#         for j in range(number, len(tf)):
		#             yf2[j] = 0
		#         break
		#     else:
		#         i = i + 1
		#
		# ax[2, 0].plot(tf, np.abs(yf2), '.-')
		# #Обратный Фурье
		# new_sig = irfft(yf2)
		# ax[2, 1].plot(new_sig, '.-')
		#
		# fig.savefig("test.png")
		# plt.show()

if __name__ == "__main__":
	import sys
	app = QApplication(sys.argv)
	MainWindow = MainWindow()
	MainWindow.setWindowTitle("Обработчик сигналов")
	MainWindow.show()
	sys.exit(app.exec_())

